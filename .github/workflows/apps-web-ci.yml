name: WEB CI

on:
  pull_request:
    branches:
      - dev
      - master
    paths:
      - 'apps/web/**'
      - '.github/workflows/apps-web-ci.yml'
      - 'compose/**'
      - 'package.json'

# Use minimal permissions by default, grant specific permissions only when needed
permissions:
  contents: read
  pull-requests: read
  issues: read

jobs:
  # Job to get changed files and determine what to test
  get-changed-files:
    name: Get Changed Files
    runs-on: ubuntu-latest
    outputs:
      changed-files: ${{ steps.get-changed-files.outputs.all_changed_files }}
      has-web-changes: ${{ steps.get-changed-files.outputs.has_web_changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get changed files
        id: get-changed-files
        run: |
          # Get the base commit based on target branch
          if [ "${{ github.base_ref }}" = "master" ]; then
            BASE_COMMIT=$(git rev-parse origin/master)
          else
            BASE_COMMIT=$(git rev-parse origin/dev)
          fi
          
          # Get changed files between PR and target branch
          CHANGED_FILES=$(git diff --name-only $BASE_COMMIT HEAD)
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Filter for Web related files ONLY (not compose or other files)
          WEB_FILES=$(echo "$CHANGED_FILES" | grep -E "^apps/web/" || true)
          
          # Check if there are actual Web application changes
          if [ -n "$WEB_FILES" ]; then
            echo "has_web_changes=true" >> $GITHUB_OUTPUT
            echo "Web changed files:"
            echo "$WEB_FILES"
          else
            echo "has_web_changes=false" >> $GITHUB_OUTPUT
            echo "No Web application changes detected"
          fi
          
          echo "all_changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # PR to dev: Test → Build Dockerfile
  web-dev-pipeline:
    name: WEB Dev Pipeline (Test → Build)
    runs-on: ubuntu-latest
    needs: get-changed-files
    if: needs.get-changed-files.outputs.has-web-changes == 'true' && github.base_ref == 'dev'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: Install dependencies
        run: yarn workspace web install --frozen-lockfile

      - name: Run linting
        run: |
          cd apps/web
          yarn lint

      - name: Run tests
        run: |
          cd apps/web
          yarn test

      - name: Build Docker image
        run: |
          cd apps/web
          docker build -t web:test .

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ WEB Dev Pipeline: Tests passed and Docker image built successfully!'
            })

  # PR to master: Docker Compose
  web-master-pipeline:
    name: WEB Master Pipeline (Docker Compose)
    runs-on: ubuntu-latest
    needs: get-changed-files
    if: needs.get-changed-files.outputs.has-web-changes == 'true' && github.base_ref == 'master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Test Docker Compose
        id: test-compose
        run: |
          echo "Testing Docker Compose for master branch..."
          
          # Start services in background
          docker compose -f compose/compose.base.yml -f compose/compose.dev.yml up -d mongo postgres rabbitmq
          
          # Wait for services to be ready
          sleep 10
          
          # Test Web service
          docker compose -f compose/compose.base.yml -f compose/compose.dev.yml run --rm web echo "Web service test passed"
          
          if [ $? -eq 0 ]; then
            echo "compose_status=passed" >> $GITHUB_OUTPUT
          else
            echo "compose_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Cleanup
          docker compose -f compose/compose.base.yml -f compose/compose.dev.yml down

      - name: Auto-merge PR
        id: auto-merge
        if: steps.test-compose.outputs.compose_status == 'passed'
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                merge_method: 'squash'
              });
              console.log('PR auto-merged successfully');
              return 'merged';
            } catch (error) {
              console.log('Auto-merge failed:', error.message);
              return 'failed';
            }

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ WEB Master Pipeline: Docker Compose test passed! PR will be auto-merged.'
            })

  # Job to handle PRs with no Web changes
  no-changes:
    name: No Web Changes
    runs-on: ubuntu-latest
    needs: get-changed-files
    if: needs.get-changed-files.outputs.has-web-changes == 'false'
    steps:
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⏭️ No Web changes detected. Skipping Web CI pipeline.'
            })
